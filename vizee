import numpy as np
import matplotlib.pyplot as plt

# Parameters
k = 5.0         # Force constant (eV/Å²) - Daha sert bir yay
mass = 1.0      # Mass (u) - Daha hafif bir parçacık
dt = 0.05       # Time step (fs) - Daha küçük zaman adımı
n_steps = 2000  # Simulation steps - Daha uzun simülasyon

# Initial conditions
x0 = 1.0        # Initial displacement (Å) - Daha büyük başlangıç konumu
v0 = 0.0        # Initial velocity (Å/fs)

# Arrays to store results
positions = np.zeros(n_steps)
velocities = np.zeros(n_steps)
kinetic_energy = np.zeros(n_steps)
potential_energy = np.zeros(n_steps)
total_energy = np.zeros(n_steps)

# Velocity Verlet algorithm
x = x0
v = v0
for i in range(n_steps):
    a = -k * x / mass  # Acceleration (F = -kx)
    x += v * dt + 0.5 * a * dt**2
    a_new = -k * x / mass
    v += 0.5 * (a + a_new) * dt
    
    positions[i] = x
    velocities[i] = v
    kinetic_energy[i] = 0.5 * mass * v**2
    potential_energy[i] = 0.5 * k * x**2
    total_energy[i] = kinetic_energy[i] + potential_energy[i]

# Plot results
plt.figure(figsize=(12, 8))

# Position
plt.subplot(2, 2, 1)
plt.plot(positions)
plt.xlabel('Time Step')
plt.ylabel('Position (Å)')
plt.title('Position vs Time')
plt.grid(True)

# Velocity
plt.subplot(2, 2, 2)
plt.plot(velocities)
plt.xlabel('Time Step')
plt.ylabel('Velocity (Å/fs)')
plt.title('Velocity vs Time')
plt.grid(True)

# Energy
plt.subplot(2, 2, 3)
plt.plot(kinetic_energy, label='Kinetic Energy')
plt.plot(potential_energy, label='Potential Energy')
plt.plot(total_energy, label='Total Energy', linestyle='--')
plt.xlabel('Time Step')
plt.ylabel('Energy (eV)')
plt.title('Energy vs Time')
plt.legend()
plt.grid(True)

# Phase space
plt.subplot(2, 2, 4)
plt.plot(positions, velocities)
plt.xlabel('Position (Å)')
plt.ylabel('Velocity (Å/fs)')
plt.title('Phase Space')
plt.grid(True)

plt.tight_layout()
plt.show()
